<html>
<head>
<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async>
</script>
<script type="text/x-mathjax-config">
 MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    TeX: { equationNumbers: { autoNumber: "AMS" }},
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    },
    "HTML-CSS": { matchFontHeight: false },
    displayAlign: "left",
    displayIndent: "2em"
  });
</script>
<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
<link rel="stylesheet" href="../../css/style_b.css">
</head>

<body>
	 <div id="pagebody">
	<div id="header">
		<h1><a href="index.html"></a></h1>
	</div>
<H1>
物理のノート
</H1>
<H2><b>反復法</b></H2>
<H3><b>ニュートン法</b></H3>
<p></p>
与えられた問題を数学的に解くための一連の手続きをアルゴリズム（Algorithm）と称する.
<br />
アルゴリズムには,必要な数学的な手続きの回数が,有限回か無限回かで大きく分けられる.有限回の解法を直接法といい,無限回の解法を反復法という.<br />
直接法の例には,<a href="https://yoshikazukashiwazaki.github.io/science_study/formula/m/determinant.html">連立1次方程式の解法であるガウスの消去法</a>がある.<p></p>
反復法の例には,ここで取り上げる<b>ニュートン法</b>（Newton's method）が知られている.<p></p>
ニュートン法は,1変数関数$f(x)$において,$f(x)=0$を満たす$x$を求める解法である.
<p></p>
この問題を解くためにニュートン法では,$y=f(x)$および,その接線を考える.<br />
$y=f(x)$が$x$の2次関数である場合,接線の傾きは$f'(x)$である.<br />
$x=x_0$における接線の方程式は,
\begin{equation}
y-f(x_0)=f'(x_0)(x-x_0)
\end{equation}

となり,接線と$y=0$すなわち$x$軸との交点を$(x_1,0)$とすると,(1)式に代入して,

\begin{equation}
0-f(x_0)=f'(x_0)(x_1-x_0)
\end{equation}
\begin{equation}
-f(x_0)=f'(x_0)(x_1-x_0)
x_1 = x_0 - \frac{f(x_0)}{f'(x_0)}
\end{equation}
を得る.
<p></p>
ここで,適当な$x_0$を選んで$x_1$を求める.そして$x_1$を$x_0$に置き換えて計算を反復すると,$f(x)=0$を満たす$x$にやがてたどり着く,というアルゴリズムがニュートン法である.すなわち

\begin{equation}
x_{n+1} = x_{n} - \frac{f(x_n)}{f'(x_n)}
\end{equation}
<H3><b>正数$a$の平方根$\sqrt a$の計算</b></H3>
ニュートン法を用いて,$2$の平方根$\sqrt 2$を求めてみる.
<p><p>
求める平方根を$x$とすると,代数的には$x^2-2=0$を解くことに等しい.<br />
ここで$f(x)=x^2-2$とおくと,$f'(x)=2x$である.(4)式より
\begin{equation}
x_{n+1} = x_{n} - \frac{x_n^2-2)}{2x_n)}
\end{equation}
このアルゴリズムをpythonで実装した例を示す.
<p></p>
<pre><code class="prettyprint">
#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
import numpy as np
print('=============')
print('Newton法')
print('=============')
eps = 0.5*10.0**-5.0 ## 収束判定定数 e:epsilon
X = 0                ## 平方根（正数）
n = 0                ## 収束判定定数に至るまでの計算の反復回数
print("入力値の平方根（正の値）を表示する.")
print('収束判定定数（eps）は {} .'.format(eps)) 
num = float(input("> "))
print('入力値は {} である.'.format(num)) 

X0 = (num + 1.0)/2.0

while True:
    X = (X0 + num/X0)/2.0   

    if np.abs(X-X0) < eps * np.abs(X):
        break
        
    X0 = X
    n += 1
    
print('平方根は {} .'.format(X)) 
print('収束条件に至るまでの反復計算は {} 回.'.format(n))
</code></pre>
<br>
実行結果は次のようになった.
<pre><code class="prettyprint">	
=============
Newton法
=============
入力値の平方根（正の値）を表示する.
収束判定定数（eps）は 5e-06 .

> 2
入力値は 2.0 である.
平方根は 1.41421356237 .
収束条件に至るまでの反復計算は 2 回.
</code></pre>
<br>

コンピュータでは無限回の演算は実行しない.ある程度の精度に達したと判定したならば演算を有限回で終了する.そのときの値を近似値として用いる.<p></p>
なお,$\sqrt 10$の値を上述のpythonプログラムで計算すると次のような結果が得られる.
<a href="https://yoshikazukashiwazaki.github.io/science_study/index.html">index.htmlに戻る</a>
<p></p>

<div id="footer"><small>Physics & Mathematics - Yoshikazu Kashiwazaki</small></div>
	 </div>
 </div>
 </body>
</html>
